# Google Cloud Workflow for PDF Document Processing
# This workflow orchestrates the entire PDF processing pipeline

main:
  params: [input]
  steps:
    - validate_input:
        call: validate_request
        args:
          request: ${input}
        result: validated_input
    
    - check_project_file_id:
        switch:
          - condition: ${validated_input.projectFileID != ""}
            next: use_project_file_id
        next: generate_new_id
    
    - use_project_file_id:
        assign:
          - document_id: ${validated_input.projectFileID}
          - processing_start_time: ${sys.now()}
        next: call_pdf_processor
    
    - generate_new_id:
        assign:
          - document_id: ${"doc_" + string(int(sys.now()))}
          - processing_start_time: ${sys.now()}
    
    - call_pdf_processor:
        call: process_pdf_with_retry
        args:
          document_id: ${document_id}
          pdf_url: ${validated_input.pdfUrl}
          processor_config: ${validated_input.processorConfig}
          r2_config: ${validated_input.r2Config}
          callback_url: ${validated_input.callbackUrl}
          webhook_url: ${validated_input.webhookUrl}
          project_id: ${validated_input.projectID}
          project_file_id: ${validated_input.projectFileID}
        result: processing_result
    
    - return_success:
        return:
          status: "success"
          document_id: ${document_id}
          processing_time: ${sys.now() - processing_start_time}
          result: ${processing_result}

# Input validation subworkflow
validate_request:
  params: [request]
  steps:
    - check_required_fields:
        switch:
          - condition: ${"pdfUrl" in request and "r2Config" in request}
            next: validate_pdf_url
        next: missing_fields_error
    
    - validate_pdf_url:
        switch:
          - condition: ${text.match_regex(request.pdfUrl, "^https?://.*\\.pdf$")}
            next: set_defaults
        next: invalid_url_error
    
    - set_defaults:
        assign:
          - validated_request:
              pdfUrl: ${request.pdfUrl}
              r2Config: ${request.r2Config}
              callbackUrl: ""
              webhookUrl: ""
              projectID: ""
              projectFileID: ""
              processorConfig:
                processorId: "fa7abbc0ea6541c5"
                projectId: "ladders-doc-pipeline-462921"
                location: "us"
    
    - set_optional_callback:
        switch:
          - condition: ${"callbackUrl" in request}
            assign:
              - validated_request.callbackUrl: ${request.callbackUrl}
    
    - set_optional_webhook:
        switch:
          - condition: ${"webhookUrl" in request}
            assign:
              - validated_request.webhookUrl: ${request.webhookUrl}
    
    - set_optional_project_id:
        switch:
          - condition: ${"projectID" in request}
            assign:
              - validated_request.projectID: ${request.projectID}
    
    - set_optional_project_file_id:
        switch:
          - condition: ${"projectFileID" in request}
            assign:
              - validated_request.projectFileID: ${request.projectFileID}
    
    - return_validated:
        return: ${validated_request}
    
    - missing_fields_error:
        raise:
          code: 400
          message: "Missing required fields: pdfUrl and r2Config are required"
    
    - invalid_url_error:
        raise:
          code: 400
          message: "Invalid PDF URL: URL must be HTTPS and end with .pdf"

# PDF processing with retry logic
process_pdf_with_retry:
  params: [document_id, pdf_url, processor_config, r2_config, callback_url, webhook_url, project_id, project_file_id]
  steps:
    - prepare_function_payload:
        assign:
          - function_payload:
              pdfUrl: ${pdf_url}
              r2Config: ${r2_config}
              callbackUrl: ${callback_url}
              webhookUrl: ${webhook_url}
              projectID: ${project_id}
              projectFileID: ${project_file_id}
    
    - call_function_with_retry:
        try:
          call: http.post
          args:
            url: "https://us-central1-ladders-doc-pipeline-462921.cloudfunctions.net/pdf-processor"
            headers:
              Content-Type: "application/json"
            body: ${function_payload}
            timeout: 540
          result: function_response
        retry:
          predicate: ${http.default_retry_predicate}
          max_retries: 3
          backoff:
            initial_delay: 5
            max_delay: 120
            multiplier: 2
        except:
          as: e
          steps:
            - log_error:
                assign:
                  - error_message: '${"PDF processing failed for document " + document_id + ": " + e.message}'
            - handle_processing_error:
                switch:
                  - condition: ${e.code == 408 or e.code == 504}
                    next: timeout_error
                  - condition: ${e.code >= 500}
                    next: server_error
                  - condition: ${e.code >= 400}
                    next: client_error
                next: unknown_error
    
    - validate_function_response:
        switch:
          - condition: ${function_response.code == 200}
            next: parse_success_response
        next: function_error_response
    
    - parse_success_response:
        assign:
          - response_body: ${function_response.body}
    
    - check_success_status:
        switch:
          - condition: ${response_body.status == "success"}
            return: ${response_body}
        next: processing_failed_error
    
    - function_error_response:
        assign:
          - error_body: ${function_response.body}
    
    - raise_function_error:
        raise:
          code: ${function_response.code}
          message: '${"Function returned error: " + error_body.error}'
    
    - processing_failed_error:
        raise:
          code: 500
          message: "PDF processing completed but returned failure status"
    
    - timeout_error:
        raise:
          code: 408
          message: "PDF processing timed out - document may be too large or complex"
    
    - server_error:
        raise:
          code: 500
          message: "Server error during PDF processing - please try again"
    
    - client_error:
        raise:
          code: 400
          message: "Invalid request parameters for PDF processing"
    
    - unknown_error:
        raise:
          code: 500
          message: "Unknown error during PDF processing" 